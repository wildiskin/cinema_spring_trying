CREATE TABLE director (
                          id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          name VARCHAR(50) NOT NULL UNIQUE
);
CREATE TABLE book (
                      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      name VARCHAR(50) NOT NULL UNIQUE,
                      genre VARCHAR(50),
                      author VARCHAR(50)
);
CREATE TABLE movie (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    year INTEGER CHECK ( 1895 < year ), CHECK (  year < DATE_PART('year', NOW()) + 1 ),
    description VARCHAR(500),
    director_id INTEGER REFERENCES director(id),
    book_id INTEGER REFERENCES book(id)
);

CREATE TABLE users (
                       id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       name VARCHAR(50),
                       password VARCHAR(250),
                       phone_number VARCHAR(15) UNIQUE CHECK( phone_number ~'[0-9]{10}' ),
                       email VARCHAR(100) UNIQUE
        CHECK ( email ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' ),
                       role VARCHAR(50),
                       is_number_approved boolean DEFAULT false,
);

CREATE TABLE basket (
                        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        user_id INTEGER REFERENCES users(id),
                        movie_id INTEGER REFERENCES movie(id)
);
CREATE TABLE collection_of_movies (
                        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        user_id INTEGER REFERENCES users(id),
                        movie_id INTEGER REFERENCES movie(id)
);

ALTER TABLE movie ADD COLUMN price INTEGER DEFAULT 399;

ALTER TABLE users RENAME COLUMN is_number_approved TO is_phone_number_approved;
ALTER TABLE users ADD COLUMN photo_link VARCHAR(100);